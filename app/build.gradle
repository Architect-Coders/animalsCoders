apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

// def keystorePropertiesFile = rootProject.file("keystore.properties")
// def keystoreProperties = new Properties()
// keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.sdkMaxVersion
    buildToolsVersion rootProject.ext.buildToolsLibVersion

    defaultConfig {
        applicationId "com.architectcoders.animalcoders"
        minSdkVersion rootProject.ext.sdkMinVersion
        targetSdkVersion rootProject.ext.sdkMaxVersion

        versionCode 1
        versionName '1.0.0'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
    }

    /*
    signingConfigs {

        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    */

    buildTypes {

        debug {
            minifyEnabled true
            multiDexEnabled true
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = true
        }

        release {
            minifyEnabled false
            multiDexEnabled false
            ext.enableCrashlytics = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':domain')
    implementation project(path: ':data')

    implementation "androidx.appcompat:appcompat:$compatLibVersion"
    implementation "androidx.core:core-ktx:$coreKtxLibVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLibVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsLibVersion"
    // implementation "com.karumi:dexter:$dexterLibVersion"
    implementation "com.google.firebase:firebase-auth:$firebaseAuthLibVersion"
    implementation "com.google.firebase:firebase-core:$firebaseCoreLibVersion"
    implementation "com.google.firebase:firebase-config:$firebaseConfigLibVersion"
    implementation "com.google.firebase:firebase-firestore:$firebaseFirestoreLibVersion"

    // implementation "com.google.firebase:firebase-messaging:$firebaseMessagingLibVersion"
    // implementation "com.google.code.gson:gson:$gsonLibVersion"
    // implementation("com.squareup.okhttp3:okhttp:$okhttp3LibVersion") { transitive = true }
    // implementation("com.squareup.retrofit2:retrofit:$retrofitLibVersion") { exclude module: 'okhttp' }
    // implementation "com.squareup.retrofit2:converter-gson:$retrofitLibVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinxCoroutines"
    implementation "com.google.android.material:material:$materialLibVersion"

    testImplementation "junit:junit:$testJunitLibVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerLibVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$testExpressoLibVersion"
}
apply plugin: 'com.google.gms.google-services'
